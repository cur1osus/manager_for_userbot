import cv2
import re
import os
import numpy as np
from PIL import Image, ImageDraw, ImageFont
import pytesseract
from glob import glob
import datetime
import time as t
import logging

pytesseract.pytesseract.tesseract_cmd = r"/usr/bin/tesseract"

font_path = "hr.ttf"
font_size = 46.5
input_folder = "./images_d"
output_dir = "./result_images_d"
os.makedirs(output_dir, exist_ok=True)

logger = logging.getLogger(__name__)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ PSM —Ä–µ–∂–∏–º—ã
psm_modes = [6, 7, 8, 13]

# –ú–∞—Å—à—Ç–∞–± –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –º–µ–ª–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
_f_v2 = 3.0
_f = 3.0

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —à—Ä–∏—Ñ—Ç–∞
try:
    font = ImageFont.truetype(font_path, font_size)
except:
    font = ImageFont.load_default()


def get_paths():
    return glob(os.path.join(input_folder, "*.[Pp][Nn][Gg]"))


def process_image_d_v2(input_path: str):
    img = cv2.imread(input_path)
    if img is None:
        return

    # === 1. –£–õ–£–ß–®–ê–ï–ú –ö–û–ù–¢–†–ê–°–¢ –î–õ–Ø –õ–Æ–ë–û–ì–û –§–û–ù–ê ===
    lab = cv2.cvtColor(img, cv2.COLOR_BGR2LAB)
    l, a, b = cv2.split(lab)
    clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8, 8))
    cl = clahe.apply(l)
    merged = cv2.merge((cl, a, b))
    enhanced = cv2.cvtColor(merged, cv2.COLOR_LAB2BGR)

    # === 2. –ì–ï–ù–ï–†–ò–†–£–ï–ú 4 –í–ï–†–°–ò–ò –î–õ–Ø OCR ===
    versions = []

    gray = cv2.cvtColor(enhanced, cv2.COLOR_BGR2GRAY)
    resized = cv2.resize(gray, None, fx=_f_v2, fy=_f_v2, interpolation=cv2.INTER_CUBIC)
    # –í–µ—Ä—Å–∏—è 2: –ò–Ω–≤–µ—Ä—Å–∏—è (—Ç—ë–º–Ω—ã–π —Ñ–æ–Ω)
    _, thresh_inv = cv2.threshold(resized, 70, 255, cv2.THRESH_BINARY_INV)
    versions.append(("dark", thresh_inv))
    # –í–µ—Ä—Å–∏—è 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (—Å–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω)
    _, thresh = cv2.threshold(resized, 180, 255, cv2.THRESH_BINARY)
    versions.append(("light", thresh))

    # === 3. –ò–©–ï–ú –¢–ï–ö–°–¢ –í–û –í–°–ï–• –í–ï–†–°–ò–Ø–• ===
    found_any = False
    pil_img = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
    draw = ImageDraw.Draw(pil_img)

    for version_name, processed in versions:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö)
        # cv2.imwrite(f"debug_{version_name}.png", processed)

        for psm in psm_modes:
            custom_config = f"--oem 3 --psm {psm} -c tessedit_char_whitelist=–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è0123456789 "
            ocr_data = pytesseract.image_to_data(
                Image.fromarray(processed),
                config=custom_config,
                lang="rus",
                output_type=pytesseract.Output.DICT,
            )

            n_boxes = len(ocr_data["text"])
            for i in range(n_boxes):
                text = ocr_data["text"][i].strip()
                if not text:
                    continue

                # –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö –° –†–ê–ó–ù–´–ú–ò –í–ê–†–ò–ê–ù–¢–ê–ú–ò –ù–ê–ü–ò–°–ê–ù–ò–Ø
                if re.search(r"–í[–æ–∞]–∑–≤—Ä[–∞–æ]—â[–µ—ë]–Ω", text, re.IGNORECASE):
                    # –¢–û–ß–ù–û–ï –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï –ö–û–û–†–î–ò–ù–ê–¢
                    x = int(ocr_data["left"][i] / _f_v2)
                    y = int(ocr_data["top"][i] / _f_v2)
                    w = int(ocr_data["width"][i] / _f_v2)
                    h = int(ocr_data["height"][i] / _f_v2)

                    fill_color = (0, 0, 0)

                    # üî• –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ë–û–ö–°
                    padding_horiz = 8
                    padding_vert_top = 3
                    padding_vert_bot = 10

                    x1 = max(0, x - padding_horiz)
                    y1 = max(0, y - padding_vert_top)
                    x2 = min(pil_img.width, x + w + padding_horiz)
                    y2 = min(pil_img.height, y + h + padding_vert_bot)

                    draw.rectangle((x1, y1, x2, y2), fill=fill_color)

                    # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞: –ë–ï–õ–´–ô –Ω–∞ —Ç—ë–º–Ω–æ–º, –ß–Å–†–ù–´–ô –Ω–∞ —Å–≤–µ—Ç–ª–æ–º
                    text_color = (0, 179, 89)
                    try:
                        time = datetime.datetime.strptime(text[9:], "%d%m%Y")
                        time_str = time.strftime("%d.%m.%Y")
                        text = text.replace(text[9:], time_str)
                    except:
                        pass

                    # –ó–∞–º–µ–Ω—è–µ–º –¢–û–õ–¨–ö–û —Ü–µ–ª–æ–µ —Å–ª–æ–≤–æ
                    new_text = re.sub(
                        r"–í[–æ–∞]–∑–≤—Ä[–∞–æ]—â[–µ—ë]–Ω",
                        "–î–æ—Å—Ç–∞–≤–ª–µ–Ω ",
                        text,
                        flags=re.IGNORECASE,
                    )

                    # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ (–Ω–∞ —Å–ª—É—á–∞–π —Å–º–µ—â–µ–Ω–∏—è)
                    draw.text(
                        (x - 5, y - int(h * 0.1)),
                        new_text,
                        fill=text_color,
                        font=font,
                    )
                    found_any = True
            if found_any:
                break
        if found_any:
            break

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    output_path = os.path.join(output_dir, os.path.basename(input_path).lower())
    pil_img.save(output_path, format="PNG")
    return found_any


def process_image_d_v1(input_path: str):
    original_image = cv2.imread(input_path)
    if original_image is None:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {input_path}")
        return

    original_rgb = cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB)
    pil_img = Image.fromarray(original_rgb)
    draw = ImageDraw.Draw(pil_img)

    # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è OCR
    gray = cv2.cvtColor(original_image, cv2.COLOR_BGR2GRAY)
    orig_h, orig_w = gray.shape
    gray = cv2.resize(gray, None, fx=_f, fy=_f)
    _, thresh = cv2.threshold(gray, 180, 255, cv2.THRESH_BINARY)
    ocr_rgb = cv2.cvtColor(thresh, cv2.COLOR_GRAY2RGB)
    pil_for_ocr = Image.fromarray(ocr_rgb)

    found_any = False

    for psm in psm_modes:
        custom_config = f"--oem 3 --psm {psm}"
        ocr_data = pytesseract.image_to_data(
            pil_for_ocr,
            config=custom_config,
            lang="rus",
            output_type=pytesseract.Output.DICT,
        )

        n_boxes = len(ocr_data["text"])
        for i in range(n_boxes):
            text = ocr_data["text"][i].strip()
            if not text:
                continue

            if re.search(r"–í–æ–∑–≤—Ä–∞—â[–µ—ë]–Ω", text):
                # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É
                x = int(ocr_data["left"][i] / _f)
                y = int(ocr_data["top"][i] / _f)
                w = int(ocr_data["width"][i] / _f)
                h = int(ocr_data["height"][i] / _f)

                text = f"{text} {ocr_data['text'][i + 1].strip()}"
                x1 = int(ocr_data["left"][i + 1] / _f)
                y1 = int(ocr_data["top"][i + 1] / _f)
                w1 = int(ocr_data["width"][i + 1] / _f)
                h1 = int(ocr_data["height"][i + 1] / _f)

                found_any = True
                # –ó–∞–∫—Ä–∞—à–∏–≤–∞–µ–º –±–µ–ª—ã–º
                draw.rectangle((x, y, x + w, y + h), fill="white")
                draw.rectangle((x1, y1, x1 + w1, y1 + h1), fill="white")
                # –í—Å—Ç–∞–≤–ª—è–µ–º "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
                new_text = re.sub(
                    r"–í–æ–∑–≤—Ä–∞—â[–µ—ë]–Ω", "–î–æ—Å—Ç–∞–≤–ª–µ–Ω", text, flags=re.IGNORECASE
                )
                draw.text(
                    (x - 5, y), new_text, fill=(0, 179, 89), font=font
                )  # –∑–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç

        if found_any:
            break

    output_path = os.path.join(output_dir, os.path.basename(input_path).lower())
    pil_img.save(output_path, format="PNG")
    return found_any


def process_image_d_vertical(input_path: str):
    original_image = cv2.imread(input_path)
    if original_image is None:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {input_path}")
        return

    original_rgb = cv2.cvtColor(original_image, cv2.COLOR_BGR2RGB)
    pil_img = Image.fromarray(original_rgb)
    draw = ImageDraw.Draw(pil_img)

    # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è OCR
    gray = cv2.cvtColor(original_image, cv2.COLOR_BGR2GRAY)
    orig_h, orig_w = gray.shape
    gray = cv2.resize(gray, None, fx=_f, fy=_f)
    _, thresh = cv2.threshold(gray, 180, 255, cv2.THRESH_BINARY)
    ocr_rgb = cv2.cvtColor(thresh, cv2.COLOR_GRAY2RGB)
    pil_for_ocr = Image.fromarray(ocr_rgb)

    found_any = False

    for psm in psm_modes:
        custom_config = f"--oem 3 --psm {psm}"
        ocr_data = pytesseract.image_to_data(
            pil_for_ocr,
            config=custom_config,
            lang="rus",
            output_type=pytesseract.Output.DICT,
        )

        n_boxes = len(ocr_data["text"])
        for i in range(n_boxes):
            text = ocr_data["text"][i].strip()
            if not text:
                continue

            if re.search(r"–í–æ–∑–≤—Ä–∞—â[–µ—ë]–Ω", text) or re.search(
                r"(\d{2}).(\d{2}).(\d{4})", text
            ):
                # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É
                x = int(ocr_data["left"][i] / _f)
                y = int(ocr_data["top"][i] / _f)
                w = int(ocr_data["width"][i] / _f)
                h = int(ocr_data["height"][i] / _f)

                found_any = True
                # –ó–∞–∫—Ä–∞—à–∏–≤–∞–µ–º –±–µ–ª—ã–º
                draw.rectangle((x, y, x + w, y + h), fill="white")
                # –í—Å—Ç–∞–≤–ª—è–µ–º "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"
                new_text = re.sub(
                    r"–í–æ–∑–≤—Ä–∞—â[–µ—ë]–Ω", "–î–æ—Å—Ç–∞–≤–ª–µ–Ω", text, flags=re.IGNORECASE
                )
                draw.text(
                    (x - 5, y), new_text, fill=(0, 179, 89), font=font
                )  # –∑–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç

        if found_any:
            break  # –≤—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞

    output_path = os.path.join(output_dir, os.path.basename(input_path).lower())
    pil_img.save(output_path, format="PNG")
    return found_any


def clear_dirs_d():
    for file in os.listdir(output_dir):
        os.remove(os.path.join(output_dir, file))
    for file in os.listdir(input_folder):
        os.remove(os.path.join(input_folder, file))

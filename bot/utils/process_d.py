import cv2
import re
import os
import numpy as np
from PIL import Image, ImageDraw, ImageFont
import pytesseract
from glob import glob
import datetime

pytesseract.pytesseract.tesseract_cmd = r"/usr/bin/tesseract"

font_path = "hr.ttf"
font_size = 46.5
input_folder = "./images_d"
output_dir = "./result_images_d"
os.makedirs(output_dir, exist_ok=True)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ PSM —Ä–µ–∂–∏–º—ã
psm_modes = [6, 7, 8, 13]

# –ú–∞—Å—à—Ç–∞–± –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –º–µ–ª–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
_f = 3.0

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —à—Ä–∏—Ñ—Ç–∞
try:
    font = ImageFont.truetype(font_path, font_size)
except:
    font = ImageFont.load_default()


def process_image_d():
    for input_path in glob(os.path.join(input_folder, "*.[Pp][Nn][Gg]")):
        img = cv2.imread(input_path)
        if img is None:
            continue

        # === 1. –£–õ–£–ß–®–ê–ï–ú –ö–û–ù–¢–†–ê–°–¢ –î–õ–Ø –õ–Æ–ë–û–ì–û –§–û–ù–ê ===
        lab = cv2.cvtColor(img, cv2.COLOR_BGR2LAB)
        l, a, b = cv2.split(lab)
        clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8, 8))
        cl = clahe.apply(l)
        merged = cv2.merge((cl, a, b))
        enhanced = cv2.cvtColor(merged, cv2.COLOR_LAB2BGR)

        # === 2. –ì–ï–ù–ï–†–ò–†–£–ï–ú 4 –í–ï–†–°–ò–ò –î–õ–Ø OCR ===
        versions = []

        # –í–µ—Ä—Å–∏—è 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (—Å–≤–µ—Ç–ª—ã–π —Ñ–æ–Ω)
        gray = cv2.cvtColor(enhanced, cv2.COLOR_BGR2GRAY)
        resized = cv2.resize(gray, None, fx=_f, fy=_f, interpolation=cv2.INTER_CUBIC)
        _, thresh = cv2.threshold(resized, 180, 255, cv2.THRESH_BINARY)
        versions.append(("light", thresh))

        # –í–µ—Ä—Å–∏—è 2: –ò–Ω–≤–µ—Ä—Å–∏—è (—Ç—ë–º–Ω—ã–π —Ñ–æ–Ω)
        _, thresh_inv = cv2.threshold(resized, 70, 255, cv2.THRESH_BINARY_INV)
        versions.append(("dark", thresh_inv))

        # –í–µ—Ä—Å–∏—è 3: –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –±–∏–Ω–∞—Ä–∏–∑–∞—Ü–∏—è
        adaptive = cv2.adaptiveThreshold(
            resized, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2
        )
        versions.append(("adaptive", adaptive))

        # –í–µ—Ä—Å–∏—è 4: –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ (–¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤)
        _, mask = cv2.threshold(resized, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
        removed_bg = cv2.inpaint(resized, mask, 3, cv2.INPAINT_TELEA)
        versions.append(("no_bg", removed_bg))

        # === 3. –ò–©–ï–ú –¢–ï–ö–°–¢ –í–û –í–°–ï–• –í–ï–†–°–ò–Ø–• ===
        found_any = False
        pil_img = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
        draw = ImageDraw.Draw(pil_img)

        for version_name, processed in versions:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö)
            # cv2.imwrite(f"debug_{version_name}.png", processed)

            for psm in psm_modes:
                custom_config = f"--oem 3 --psm {psm} -c tessedit_char_whitelist=–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è0123456789 "
                ocr_data = pytesseract.image_to_data(
                    Image.fromarray(processed),
                    config=custom_config,
                    lang="rus",
                    output_type=pytesseract.Output.DICT,
                )

                n_boxes = len(ocr_data["text"])
                for i in range(n_boxes):
                    text = ocr_data["text"][i].strip()
                    if not text:
                        continue

                    # –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö –° –†–ê–ó–ù–´–ú–ò –í–ê–†–ò–ê–ù–¢–ê–ú–ò –ù–ê–ü–ò–°–ê–ù–ò–Ø
                    if re.search(r"–í[–æ–∞]–∑–≤—Ä[–∞–æ]—â[–µ—ë]–Ω", text, re.IGNORECASE):
                        # –¢–û–ß–ù–û–ï –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï –ö–û–û–†–î–ò–ù–ê–¢
                        x = int(ocr_data["left"][i] / _f)
                        y = int(ocr_data["top"][i] / _f)
                        w = int(ocr_data["width"][i] / _f)
                        h = int(ocr_data["height"][i] / _f)

                        # === –£–ú–ù–ê–Ø –ó–ê–ú–ï–ù–ê –¢–ï–ö–°–¢–ê –° –†–ê–°–®–ò–†–ï–ù–ù–´–ú –ë–û–ö–°–û–ú ===
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –ü–†–Ø–ú–û –í –≠–¢–û–ô –û–ë–õ–ê–°–¢–ò (—Å –∑–∞–ø–∞—Å–æ–º)
                        roi = img[
                            max(0, y - 10) : min(img.shape[0], y + h + 15),
                            max(0, x - 10) : min(img.shape[1], x + w + 10),
                        ]
                        if roi.size == 0:
                            continue

                        avg_color = np.mean(roi, axis=(0, 1))
                        is_dark = np.mean(avg_color) < 128
                        fill_color = (0, 0, 0) if is_dark else (255, 255, 255)

                        # üî• –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ë–û–ö–°
                        padding_horiz = 8
                        padding_vert_top = 3
                        padding_vert_bot = 10

                        x1 = max(0, x - padding_horiz)
                        y1 = max(0, y - padding_vert_top)
                        x2 = min(pil_img.width, x + w + padding_horiz)
                        y2 = min(pil_img.height, y + h + padding_vert_bot)

                        draw.rectangle((x1, y1, x2, y2), fill=fill_color)

                        # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞: –ë–ï–õ–´–ô –Ω–∞ —Ç—ë–º–Ω–æ–º, –ß–Å–†–ù–´–ô –Ω–∞ —Å–≤–µ—Ç–ª–æ–º
                        text_color = (0, 179, 89) if is_dark else (0, 179, 89)

                        time = datetime.datetime.strptime(text[9:], "%d%m%Y")
                        time_str = time.strftime("%d.%m.%Y")
                        text = text.replace(text[9:], time_str)

                        # –ó–∞–º–µ–Ω—è–µ–º –¢–û–õ–¨–ö–û —Ü–µ–ª–æ–µ —Å–ª–æ–≤–æ
                        new_text = re.sub(
                            r"–í[–æ–∞]–∑–≤—Ä[–∞–æ]—â[–µ—ë]–Ω",
                            "–î–æ—Å—Ç–∞–≤–ª–µ–Ω ",
                            text,
                            flags=re.IGNORECASE,
                        )

                        # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ (–Ω–∞ —Å–ª—É—á–∞–π —Å–º–µ—â–µ–Ω–∏—è)
                        draw.text(
                            (x, y - int(h * 0.1)), new_text, fill=text_color, font=font
                        )
                        found_any = True

                if found_any:
                    break
            if found_any:
                break

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        output_path = os.path.join(output_dir, os.path.basename(input_path).lower())
        pil_img.save(output_path, format="PNG")


def clear_dirs_d():
    for file in os.listdir(output_dir):
        os.remove(os.path.join(output_dir, file))
    for file in os.listdir(input_folder):
        os.remove(os.path.join(input_folder, file))
